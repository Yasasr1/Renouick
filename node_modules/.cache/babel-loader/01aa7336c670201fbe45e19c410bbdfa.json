{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Thisara\\\\Documents\\\\renouick\\\\Renouick\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Thisara\\\\Documents\\\\renouick\\\\Renouick\\\\src\\\\components\\\\RegistrationPages\\\\WorkerRegistration\\\\WorkerRegistration.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport MyTextField from '../../UI/TextField/TextField';\nimport './WorkerRegistration.css';\nimport PasswordField from '../../UI/TextField/PasswordField';\nimport { TextField } from '@material-ui/core';\nimport validator from 'validator';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\n\nclass WorkerRegistration extends Component {\n  constructor(...args) {\n    super(...args);\n    this.inputValues = {\n      firstName: {\n        value: '',\n        isValid: true,\n        message: ''\n      },\n      lastName: {\n        value: '',\n        isValid: true,\n        message: ''\n      },\n      birthday: {\n        value: '',\n        isValid: true,\n        message: ''\n      },\n      email: {\n        value: '',\n        isValid: true,\n        message: ''\n      },\n      username: {\n        value: '',\n        isValid: true,\n        message: ''\n      },\n      password: {\n        value: '',\n        isValid: true,\n        message: ''\n      },\n      confirmPassword: {\n        value: '',\n        isValid: true,\n        message: ''\n      },\n      workingCategory: {\n        value: [],\n        isValid: true\n      }\n    };\n    this.state = _objectSpread({}, this.inputValues);\n\n    this.inputHandler = event => {\n      const updatedState = _objectSpread({}, this.state, {\n        [event.target.id]: _objectSpread({}, this.state[event.target.id], {\n          value: event.target.value\n        })\n      });\n\n      this.setState(updatedState);\n    };\n\n    this.checkboxInputHandler = event => {\n      let updatedState = _objectSpread({}, this.state);\n\n      let isDeleted = false; //check if the value is already in the array. if it's already there that means user is clicking on the checkbox 2nd\n      //time and should delete the value\n\n      updatedState[event.target.id].value.map((element, index) => {\n        if (element === event.target.value) {\n          updatedState[event.target.id].value.splice(index, 1);\n          isDeleted = true;\n        }\n\n        return 0;\n      }); //if true that means value is deleted and should not add it again to the array\n\n      if (isDeleted === false) {\n        updatedState = _objectSpread({}, this.state, {\n          [event.target.id]: _objectSpread({}, this.state[event.target.id], {\n            value: [...this.state[event.target.id].value, event.target.value]\n          })\n        });\n      }\n\n      this.setState(updatedState);\n    };\n\n    this.formValidationHandler = () => {\n      const copiedState = _objectSpread({}, this.state);\n\n      let isConfirmed = true;\n\n      if (!copiedState.firstName.value) {\n        copiedState.firstName.isValid = false;\n        copiedState.firstName.message = '*Required';\n        isConfirmed = false;\n      } else {\n        copiedState.firstName.isValid = true;\n        copiedState.firstName.message = '';\n      }\n\n      if (!copiedState.lastName.value) {\n        copiedState.lastName.isValid = false;\n        copiedState.lastName.message = '*Required';\n        isConfirmed = false;\n      } else {\n        copiedState.lastName.isValid = true;\n        copiedState.lastName.message = '';\n      }\n\n      if (!copiedState.username.value) {\n        copiedState.username.isValid = false;\n        copiedState.username.message = '*Required';\n        isConfirmed = false;\n      } else {\n        copiedState.username.isValid = true;\n        copiedState.username.message = '';\n      }\n\n      if (copiedState.workingCategory.value.length === 0) {\n        copiedState.workingCategory.isValid = false;\n        isConfirmed = false;\n      } else {\n        copiedState.workingCategory.isValid = true;\n      }\n\n      if (!validator.isEmail(copiedState.email.value)) {\n        copiedState.email.isValid = false;\n        copiedState.email.message = 'Not a valid email address';\n        isConfirmed = false;\n      } else {\n        copiedState.email.isValid = true;\n        copiedState.email.message = '';\n      }\n\n      if (!copiedState.password.value) {\n        copiedState.password.isValid = false;\n        copiedState.password.message = '*Required';\n        isConfirmed = false;\n      } else {\n        copiedState.password.isValid = true;\n        copiedState.password.message = '';\n      }\n\n      if (copiedState.password.value !== copiedState.confirmPassword.value || !copiedState.confirmPassword.value) {\n        copiedState.confirmPassword.isValid = false;\n        copiedState.confirmPassword.message = 'Password do not match';\n        isConfirmed = false;\n      } else {\n        copiedState.confirmPassword.isValid = true;\n        copiedState.confirmPassword.message = '';\n      }\n\n      this.setState(copiedState);\n      return isConfirmed;\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n\n      if (this.formValidationHandler()) {\n        // form processing here....\n        const newWorker = {\n          firstName: this.state.firstName.value,\n          lastName: this.state.lastName.value,\n          birthday: this.state.birthday.value,\n          email: this.state.email.value,\n          username: this.state.username.value,\n          password: this.state.password.value,\n          workingCategory: this.state.workingCategory.value\n        };\n        axios.post('http://localhost:4000/reno/addWorker', newWorker).then(res => {\n          console.log(res.data);\n        });\n      }\n    };\n\n    this.clearFormHandler = () => {\n      this.setState(_objectSpread({}, this.inputValues));\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"WorkerRegistrationOuterDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"WorkerRegistrationInnerDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      className: \"text-uppercase text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \"Worker Registration\"), React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(MyTextField, {\n      id: \"firstName\",\n      error: !this.state.firstName.isValid,\n      label: \"First Name\",\n      placeholder: \"Insert First Name\",\n      helperText: !this.state.firstName.isValid ? React.createElement(\"p\", {\n        style: {\n          color: 'red'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, this.state.firstName.message) : null,\n      changed: this.inputHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }), React.createElement(MyTextField, {\n      id: \"lastName\",\n      label: \"Last Name\",\n      placeholder: \"Input Last Name\",\n      error: !this.state.lastName.isValid,\n      helperText: !this.state.lastName.isValid ? React.createElement(\"p\", {\n        style: {\n          color: 'red'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, this.state.lastName.message) : null,\n      changed: this.inputHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      id: \"birthday\",\n      label: \"Birthday\",\n      type: \"date\",\n      style: {\n        margin: 12,\n        width: '95%'\n      },\n      InputLabelProps: {\n        shrink: true\n      },\n      onChange: this.inputHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }), React.createElement(MyTextField, {\n      error: !this.state.email.isValid,\n      id: \"email\",\n      label: \"E-mail\",\n      placeholder: \"Insert Email\",\n      helperText: !this.state.email.isValid ? React.createElement(\"p\", {\n        style: {\n          color: 'red'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, this.state.email.message) : null,\n      changed: this.inputHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }), React.createElement(MyTextField, {\n      error: !this.state.username.isValid,\n      id: \"username\",\n      label: \"Username\",\n      placeholder: \"Insert Username\",\n      helperText: !this.state.username.isValid ? React.createElement(\"p\", {\n        style: {\n          color: 'red'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, this.state.username.message) : null,\n      changed: this.inputHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }), React.createElement(PasswordField, {\n      error: !this.state.password.isValid,\n      id: \"password\",\n      label: \"Password\",\n      changed: this.inputHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }), React.createElement(PasswordField, {\n      error: !this.state.confirmPassword.isValid,\n      id: \"confirmPassword\",\n      label: !this.state.confirmPassword.isValid ? \"Don't match\" : \"Confirm Password\",\n      changed: this.inputHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"WorkerRegistrationCheckbox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, React.createElement(FormLabel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, \"Select Working Catagory\")), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, React.createElement(FormControlLabel, {\n      control: React.createElement(Checkbox, {\n        id: \"workingCategory\",\n        value: \"plumbing\",\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }),\n      onChange: this.checkboxInputHandler,\n      label: \"Plumbing\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }), React.createElement(FormControlLabel, {\n      control: React.createElement(Checkbox, {\n        id: \"workingCategory\",\n        value: \"painting\",\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }),\n      label: \"Painting\",\n      onChange: this.checkboxInputHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }), React.createElement(FormControlLabel, {\n      control: React.createElement(Checkbox, {\n        id: \"workingCategory\",\n        value: \"electricalWork\",\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }),\n      label: \"Electrical Work\",\n      id: \"electricalWork\",\n      onChange: this.checkboxInputHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }), React.createElement(FormControlLabel, {\n      control: React.createElement(Checkbox, {\n        id: \"workingCategory\",\n        value: \"grassCutting\",\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }),\n      label: \"Grass Cutting\",\n      id: \"grassCutting\",\n      onChange: this.checkboxInputHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }), React.createElement(FormControlLabel, {\n      control: React.createElement(Checkbox, {\n        id: \"workingCategory\",\n        value: \"houseCleaning\",\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      }),\n      label: \"House Cleaning\",\n      id: \"houseCleaning\",\n      onChange: this.checkboxInputHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }), React.createElement(FormControlLabel, {\n      control: React.createElement(Checkbox, {\n        id: \"workingCategory\",\n        value: \"acRepair\",\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }),\n      label: \"A/C Repair\",\n      id: \"acRepair\",\n      onChange: this.checkboxInputHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    })), !this.state.workingCategory.isValid ? React.createElement(\"p\", {\n      style: {\n        color: 'red'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, \"Please select work category\") : null, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.submitHandler,\n      className: \"btn btn-block btn-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, \"Register\"), React.createElement(\"button\", {\n      type: \"reset\",\n      onClick: this.clearFormHandler,\n      className: \"btn btn-block btn-danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, \"Clear\"), React.createElement(\"p\", {\n      className: \"text-muted\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, \"have an account?\"), React.createElement(Link, {\n      to: \"/login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }, \"Sign in\"))));\n  }\n\n}\n\nexport default WorkerRegistration;","map":{"version":3,"sources":["C:\\Users\\Thisara\\Documents\\renouick\\Renouick\\src\\components\\RegistrationPages\\WorkerRegistration\\WorkerRegistration.js"],"names":["React","Component","MyTextField","PasswordField","TextField","validator","Checkbox","FormGroup","FormControlLabel","FormLabel","axios","Link","WorkerRegistration","inputValues","firstName","value","isValid","message","lastName","birthday","email","username","password","confirmPassword","workingCategory","state","inputHandler","event","updatedState","target","id","setState","checkboxInputHandler","isDeleted","map","element","index","splice","formValidationHandler","copiedState","isConfirmed","length","isEmail","submitHandler","preventDefault","newWorker","post","then","res","console","log","data","clearFormHandler","render","color","margin","width","shrink"],"mappings":"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","sourcesContent":["import React , { Component } from 'react';\r\nimport MyTextField from '../../UI/TextField/TextField';\r\nimport './WorkerRegistration.css';\r\nimport PasswordField from '../../UI/TextField/PasswordField';\r\nimport {TextField} from '@material-ui/core';\r\nimport validator from 'validator';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nclass WorkerRegistration extends Component {\r\n    inputValues = {\r\n        \r\n        firstName: {value: '', isValid: true, message: ''},\r\n        lastName: {value: '', isValid: true, message: ''},\r\n        birthday: {value: '', isValid: true, message: ''},\r\n        email: {value: '', isValid: true, message: ''},\r\n        username: {value: '', isValid: true, message: ''},\r\n        password: {value: '', isValid: true, message: ''},\r\n        confirmPassword: {value: '', isValid: true, message: ''},\r\n        workingCategory : {value: [], isValid: true},\r\n        \r\n    \r\n    }\r\n    \r\n    state = {...this.inputValues};\r\n\r\n    inputHandler = (event) => {\r\n       const updatedState = {\r\n            ...this.state,\r\n            [event.target.id]: {\r\n                ...this.state[event.target.id],\r\n                value: event.target.value,\r\n            }\r\n        };\r\n\r\n        this.setState(updatedState)\r\n        \r\n    }\r\n\r\n    checkboxInputHandler =(event) => {\r\n        let updatedState = {...this.state};\r\n        let isDeleted = false;\r\n\r\n        //check if the value is already in the array. if it's already there that means user is clicking on the checkbox 2nd\r\n        //time and should delete the value\r\n        updatedState[event.target.id].value.map((element,index) => {\r\n            if(element === event.target.value) {\r\n                updatedState[event.target.id].value.splice(index,1);\r\n                isDeleted = true;\r\n            }\r\n            return 0;\r\n        })\r\n\r\n        //if true that means value is deleted and should not add it again to the array\r\n        if(isDeleted === false) {\r\n            updatedState = {\r\n                ...this.state,\r\n                [event.target.id]: {\r\n                    ...this.state[event.target.id],\r\n                    value: [...this.state[event.target.id].value,event.target.value]\r\n                }\r\n            };\r\n        }\r\n\r\n        this.setState(updatedState);\r\n\r\n       \r\n    }\r\n\r\n    formValidationHandler = () => {\r\n        const copiedState = {...this.state};\r\n        let isConfirmed = true;\r\n\r\n        if(!copiedState.firstName.value){\r\n            copiedState.firstName.isValid = false;\r\n            copiedState.firstName.message = '*Required';\r\n            isConfirmed = false;\r\n        } else  {\r\n            copiedState.firstName.isValid = true;\r\n            copiedState.firstName.message = '';\r\n        }\r\n        if(!copiedState.lastName.value){\r\n            copiedState.lastName.isValid = false;\r\n            copiedState.lastName.message = '*Required';\r\n            isConfirmed = false;\r\n        } else  {\r\n            copiedState.lastName.isValid = true;\r\n            copiedState.lastName.message = '';\r\n        }\r\n\r\n        if(!copiedState.username.value){\r\n            copiedState.username.isValid = false;\r\n            copiedState.username.message = '*Required';\r\n            isConfirmed = false;\r\n        } else  {\r\n            copiedState.username.isValid = true;\r\n            copiedState.username.message = '';\r\n        }\r\n        \r\n        if(copiedState.workingCategory.value.length === 0){\r\n            copiedState.workingCategory.isValid = false;\r\n            isConfirmed = false;\r\n        } else  {\r\n            copiedState.workingCategory.isValid = true;\r\n        }\r\n        \r\n        if (!validator.isEmail(copiedState.email.value)) {\r\n            copiedState.email.isValid = false;\r\n            copiedState.email.message = 'Not a valid email address';\r\n            isConfirmed = false;\r\n        } else  {\r\n            copiedState.email.isValid = true;\r\n            copiedState.email.message = '';\r\n        }\r\n\r\n        if(!copiedState.password.value){\r\n            copiedState.password.isValid = false;\r\n            copiedState.password.message = '*Required';\r\n            isConfirmed = false;\r\n        } else  {\r\n            copiedState.password.isValid = true;\r\n            copiedState.password.message = '';\r\n        }\r\n\r\n        if(copiedState.password.value !== copiedState.confirmPassword.value || !copiedState.confirmPassword.value){\r\n            copiedState.confirmPassword.isValid = false;\r\n            copiedState.confirmPassword.message = 'Password do not match';\r\n            isConfirmed = false;\r\n        } else  {\r\n            copiedState.confirmPassword.isValid = true;\r\n            copiedState.confirmPassword.message = '';\r\n        }\r\n\r\n        this.setState(copiedState);\r\n        return isConfirmed;\r\n        \r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        if (this.formValidationHandler()) {\r\n          // form processing here....\r\n          const newWorker = {\r\n              firstName: this.state.firstName.value,\r\n              lastName: this.state.lastName.value,\r\n              birthday: this.state.birthday.value,\r\n              email: this.state.email.value,\r\n              username: this.state.username.value,\r\n              password: this.state.password.value,\r\n              workingCategory: this.state.workingCategory.value\r\n          }\r\n\r\n          axios.post('http://localhost:4000/reno/addWorker', newWorker)\r\n            .then(res => {\r\n                console.log(res.data);\r\n            });\r\n        }\r\n    }\r\n    clearFormHandler = () => {\r\n        this.setState({...this.inputValues});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"WorkerRegistrationOuterDiv\">\r\n                <div className=\"WorkerRegistrationInnerDiv\">\r\n                    <h5 className=\"text-uppercase text-center\">Worker Registration</h5>\r\n                    <form>\r\n                        <MyTextField\r\n                        id=\"firstName\"\r\n                        error={!this.state.firstName.isValid}\r\n                        label=\"First Name\"\r\n                        placeholder=\"Insert First Name\"\r\n                        helperText={!this.state.firstName.isValid ? <p style={{color: 'red'}}>{this.state.firstName.message}</p> : null}\r\n                        changed={this.inputHandler}\r\n                        />\r\n\r\n                        <MyTextField\r\n                        id=\"lastName\"\r\n                        label=\"Last Name\"\r\n                        placeholder=\"Input Last Name\"\r\n                        error={!this.state.lastName.isValid}\r\n                        helperText={!this.state.lastName.isValid ? <p style={{color: 'red'}}>{this.state.lastName.message}</p> : null}\r\n                        changed={this.inputHandler}\r\n                        />\r\n\r\n                        <TextField\r\n                        id=\"birthday\"\r\n                        label=\"Birthday\"\r\n                        type=\"date\"\r\n                        style={{ margin: 12, width: '95%' }}\r\n                        InputLabelProps={{\r\n                        shrink: true,\r\n                        }}\r\n                        onChange={this.inputHandler}\r\n                        />\r\n\r\n                        <MyTextField\r\n                        error={!this.state.email.isValid}\r\n                        id=\"email\"\r\n                        label=\"E-mail\"\r\n                        placeholder=\"Insert Email\"\r\n                        helperText={!this.state.email.isValid ? <p style={{color: 'red'}}>{this.state.email.message}</p> : null}\r\n                        changed={this.inputHandler}\r\n                        />\r\n\r\n                        <MyTextField\r\n                        error={!this.state.username.isValid}\r\n                        id=\"username\"\r\n                        label=\"Username\"\r\n                        placeholder=\"Insert Username\"\r\n                        helperText={!this.state.username.isValid ? <p style={{color: 'red'}}>{this.state.username.message}</p> : null}\r\n                        changed={this.inputHandler}\r\n                        />\r\n\r\n                        <PasswordField\r\n                        error={!this.state.password.isValid}\r\n                        id=\"password\"\r\n                        label=\"Password\"\r\n                        changed={this.inputHandler}\r\n                        />\r\n\r\n                        <PasswordField\r\n                        error={!this.state.confirmPassword.isValid}\r\n                        id=\"confirmPassword\"\r\n                        label={!this.state.confirmPassword.isValid ?  \"Don't match\" : \"Confirm Password\"}\r\n                        changed={this.inputHandler}\r\n                        />\r\n\r\n                        <div className=\"WorkerRegistrationCheckbox\">\r\n                            <FormLabel >Select Working Catagory</FormLabel>\r\n                        </div>\r\n\r\n                        <FormGroup>\r\n                            <FormControlLabel\r\n                            control={<Checkbox id=\"workingCategory\" value=\"plumbing\" color=\"primary\" />}\r\n                            onChange={this.checkboxInputHandler}\r\n                            label=\"Plumbing\"\r\n                            />\r\n\r\n                            <FormControlLabel\r\n                            control={<Checkbox id=\"workingCategory\" value=\"painting\" color=\"primary\" />}\r\n                            label=\"Painting\"\r\n                            onChange={this.checkboxInputHandler}\r\n                            />\r\n          \r\n                            <FormControlLabel\r\n                            control={<Checkbox id=\"workingCategory\" value=\"electricalWork\" color=\"primary\" />}\r\n                            label=\"Electrical Work\"\r\n                            id=\"electricalWork\"\r\n                            onChange={this.checkboxInputHandler}\r\n                            />\r\n\r\n                            <FormControlLabel\r\n                            control={<Checkbox id=\"workingCategory\" value=\"grassCutting\" color=\"primary\" />}\r\n                            label=\"Grass Cutting\"\r\n                            id=\"grassCutting\"\r\n                            onChange={this.checkboxInputHandler}\r\n                            />\r\n\r\n                            <FormControlLabel\r\n                            control={<Checkbox id=\"workingCategory\" value=\"houseCleaning\" color=\"primary\" />}\r\n                            label=\"House Cleaning\"\r\n                            id=\"houseCleaning\"\r\n                            onChange={this.checkboxInputHandler}\r\n                            />\r\n\r\n                            <FormControlLabel\r\n                            control={<Checkbox id=\"workingCategory\" value=\"acRepair\" color=\"primary\" />}\r\n                            label=\"A/C Repair\"\r\n                            id=\"acRepair\"\r\n                            onChange={this.checkboxInputHandler}\r\n                            />\r\n                        </FormGroup>\r\n                        {!this.state.workingCategory.isValid ? <p style={{color: 'red'}}>Please select work category</p> : null}\r\n                        <br/>\r\n                        <br/>\r\n                        <button onClick={this.submitHandler} className=\"btn btn-block btn-primary\">Register</button>\r\n                        <button type=\"reset\" onClick={this.clearFormHandler} className=\"btn btn-block btn-danger\">Clear</button>\r\n                        <p className=\"text-muted\">have an account?</p>\r\n                        <Link to=\"/login\">Sign in</Link>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n                \r\n        );\r\n    }\r\n}\r\n\r\nexport default WorkerRegistration;"]},"metadata":{},"sourceType":"module"}